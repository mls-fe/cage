'use strict';

var Configstore = require('configstore'),
    Inquirer = require('inquirer'),
    Key = require('./key'),
    conf = new Configstore(Key.profile);

var WorkSpace = {
    list: function list() {
        var list = conf.get(Key.workspace_list),
            currentWorkSpace = conf.get(Key.current_path);
        log(currentWorkSpace);
        if (!list || !list.length) {
            log('目前还没有建立过任何工作空间(workspace)', 'warn');
        } else {
            Inquirer.prompt([{
                type: 'list',
                name: 'workspace',
                message: '工作空间列表',
                choices: list,
                'default': currentWorkSpace
            }], function (answer) {
                log(answer.workspace);
                log('切换工作空间成功！');
            });
        }
    },

    setCurrentWorkSpace: function setCurrentWorkSpace(path) {
        var list = conf.get(Key.workspace_list) || [],
            existPath = undefined,
            alreadyExist = list.some(function (item, i) {
            if (item == path) {
                existPath = {
                    val: item,
                    index: i
                };
                return true;
            }
        });

        if (alreadyExist) {
            list.splice(existPath.index, 1);
        }

        list.unshift(path);
        conf.set(Key.workspace_list, list);
        conf.set(Key.current_path, path);
    }
};

module.exports = WorkSpace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtzcGFjZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBRSxhQUFhLENBQUU7SUFDdEMsUUFBUSxHQUFNLE9BQU8sQ0FBRSxVQUFVLENBQUU7SUFDbkMsR0FBRyxHQUFXLE9BQU8sQ0FBRSxPQUFPLENBQUU7SUFDaEMsSUFBSSxHQUFVLElBQUksV0FBVyxDQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQTs7QUFFaEQsSUFBSSxTQUFTLEdBQUc7QUFDWixRQUFJLEVBQUEsZ0JBQUc7QUFDSCxZQUFJLElBQUksR0FBZSxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUU7WUFDakQsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUMsWUFBWSxDQUFFLENBQUE7QUFDbkQsV0FBRyxDQUFFLGdCQUFnQixDQUFFLENBQUE7QUFDdkIsWUFBSyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUc7QUFDekIsZUFBRyxDQUFFLDJCQUEyQixFQUFFLE1BQU0sQ0FBRSxDQUFBO1NBQzdDLE1BQU07QUFDSCxvQkFBUSxDQUNILE1BQU0sQ0FBRSxDQUFFO0FBQ1Asb0JBQUksRUFBRSxNQUFNO0FBQ1osb0JBQUksRUFBRSxXQUFXO0FBQ2pCLHVCQUFPLEVBQUUsUUFBUTtBQUNqQix1QkFBTyxFQUFFLElBQUk7QUFDYiwyQkFBUyxnQkFBZ0I7YUFDNUIsQ0FBRSxFQUFFLFVBQUEsTUFBTSxFQUFJO0FBQ1gsbUJBQUcsQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFFLENBQUE7QUFDdkIsbUJBQUcsQ0FBRSxXQUFXLENBQUUsQ0FBQTthQUNyQixDQUFFLENBQUE7U0FDVjtLQUNKOztBQUVELHVCQUFtQixFQUFBLDZCQUFFLElBQUksRUFBRztBQUN4QixZQUFJLElBQUksR0FBVyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUUsSUFBSSxFQUFFO1lBQ25ELFNBQVMsWUFBQTtZQUNULFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFFLFVBQUUsSUFBSSxFQUFFLENBQUMsRUFBTTtBQUNyQyxnQkFBSyxJQUFJLElBQUksSUFBSSxFQUFHO0FBQ2hCLHlCQUFTLEdBQUc7QUFDUix1QkFBRyxFQUFFLElBQUk7QUFDVCx5QkFBSyxFQUFFLENBQUM7aUJBQ1gsQ0FBQTtBQUNELHVCQUFPLElBQUksQ0FBQTthQUNkO1NBQ0osQ0FBRSxDQUFBOztBQUVQLFlBQUssWUFBWSxFQUFHO0FBQ2hCLGdCQUFJLENBQUMsTUFBTSxDQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFFLENBQUE7U0FDcEM7O0FBRUQsWUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBQTtBQUNwQixZQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFFLENBQUE7QUFDcEMsWUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBRSxDQUFBO0tBQ3JDO0NBQ0osQ0FBQTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQSIsImZpbGUiOiJ3b3Jrc3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQ29uZmlnc3RvcmUgPSByZXF1aXJlKCAnY29uZmlnc3RvcmUnICksXG4gICAgSW5xdWlyZXIgICAgPSByZXF1aXJlKCAnaW5xdWlyZXInICksXG4gICAgS2V5ICAgICAgICAgPSByZXF1aXJlKCAnLi9rZXknICksXG4gICAgY29uZiAgICAgICAgPSBuZXcgQ29uZmlnc3RvcmUoIEtleS5wcm9maWxlIClcblxubGV0IFdvcmtTcGFjZSA9IHtcbiAgICBsaXN0KCkge1xuICAgICAgICBsZXQgbGlzdCAgICAgICAgICAgICA9IGNvbmYuZ2V0KCBLZXkud29ya3NwYWNlX2xpc3QgKSxcbiAgICAgICAgICAgIGN1cnJlbnRXb3JrU3BhY2UgPSBjb25mLmdldCggS2V5LmN1cnJlbnRfcGF0aCApXG4gICAgICAgIGxvZyggY3VycmVudFdvcmtTcGFjZSApXG4gICAgICAgIGlmICggIWxpc3QgfHwgIWxpc3QubGVuZ3RoICkge1xuICAgICAgICAgICAgbG9nKCAn55uu5YmN6L+Y5rKh5pyJ5bu656uL6L+H5Lu75L2V5bel5L2c56m66Ze0KHdvcmtzcGFjZSknLCAnd2FybicgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgSW5xdWlyZXJcbiAgICAgICAgICAgICAgICAucHJvbXB0KCBbIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnd29ya3NwYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+W3peS9nOepuumXtOWIl+ihqCcsXG4gICAgICAgICAgICAgICAgICAgIGNob2ljZXM6IGxpc3QsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGN1cnJlbnRXb3JrU3BhY2VcbiAgICAgICAgICAgICAgICB9IF0sIGFuc3dlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZyggYW5zd2VyLndvcmtzcGFjZSApXG4gICAgICAgICAgICAgICAgICAgIGxvZyggJ+WIh+aNouW3peS9nOepuumXtOaIkOWKn++8gScgKVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldEN1cnJlbnRXb3JrU3BhY2UoIHBhdGggKSB7XG4gICAgICAgIGxldCBsaXN0ICAgICAgICAgPSBjb25mLmdldCggS2V5LndvcmtzcGFjZV9saXN0ICkgfHwgW10sXG4gICAgICAgICAgICBleGlzdFBhdGgsXG4gICAgICAgICAgICBhbHJlYWR5RXhpc3QgPSBsaXN0LnNvbWUoICggaXRlbSwgaSApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIGl0ZW0gPT0gcGF0aCApIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RQYXRoID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgIGlmICggYWxyZWFkeUV4aXN0ICkge1xuICAgICAgICAgICAgbGlzdC5zcGxpY2UoIGV4aXN0UGF0aC5pbmRleCwgMSApXG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnVuc2hpZnQoIHBhdGggKVxuICAgICAgICBjb25mLnNldCggS2V5LndvcmtzcGFjZV9saXN0LCBsaXN0IClcbiAgICAgICAgY29uZi5zZXQoIEtleS5jdXJyZW50X3BhdGgsIHBhdGggKVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXb3JrU3BhY2VcbiJdfQ==