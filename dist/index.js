/**
 * commands:
 *  setup
 *      在当前目录下获取
 *  config(c)
 *  run(r)
 *  stop(s)
 */

'use strict';

var _bluebird = require('bluebird');

require('./log');
require('./profile');

var Commander = require('commander'),
    Moment = require('moment'),
    Open = require('open'),
    Tail = require('tail').Tail,
    ConfigCLI = require('./cli/config'),
    SetupCLI = require('./cli/setup'),
    WorkSpaceCLI = require('./cli/workspace'),
    WorkSpace = require('./core/workspace'),
    Update = require('./update'),
    pkg = require('../package.json'),
    logValues = { 's': 1, 'js': 1 },
    findValidWorkspace = _bluebird.coroutine(function* (dir) {
    var isValid = yield WorkSpace.isValidWorkSpace(dir);

    if (!isValid) {
        dir = WorkSpace.current();
        isValid = yield WorkSpace.isValidWorkSpace(dir);
    }

    if (isValid) {
        return { isValid: isValid, dir: dir };
    } else {
        log('无法找到可运行的工作空间', 'error');
        throw new Error();
    }
});

Commander.version(pkg.version, '-v, --version');

Commander.command('setup [dir] [url]').action(function (dir, url) {
    return new SetupCLI(dir || '', url || '');
});

Commander.command('config [dir]').alias('c').action(function () {
    var dir = arguments[0] === undefined ? process.cwd() : arguments[0];
    return new ConfigCLI(dir);
});

Commander.command('run').alias('r').action(_bluebird.coroutine(function* () {
    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).start();
}));

Commander.command('stop [isAll]').alias('s').action(_bluebird.coroutine(function* () {
    var isAll = arguments[0] === undefined ? false : arguments[0];

    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).stop(isAll);
}));

Commander.command('sa').action(_bluebird.coroutine(function* () {
    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).stop('all');
}));

Commander.command('log [type]').alias('l').action(function () {
    var type = arguments[0] === undefined ? 's' : arguments[0];

    if (type in logValues) {
        (function () {
            var date = Moment().format('YYYY/MM/DD'),
                tail = new Tail('/tmp/log/nest-' + type + 'erver/' + date + '.log');

            tail.on('line', function (data) {
                return log(data);
            }).on('error', function () {
                return tail.unwatch();
            });
        })();
    } else {
        log('log 只接受 s/js 两个参数', 'error');
    }
});

Commander.command('lo').action(function () {
    var date = Moment().format('YYYY/MM/');

    Open('/tmp/log/nest-server/' + date, 'finder');
});

Commander.command('ls').action(function () {
    return WorkSpaceCLI.list();
});

Commander.parse(process.argv);

Update.check();
//# sourceMappingURL=data:application/json;base64,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QUFBO0NBQ25ELENBQUUsQ0FBQTs7QUFFUCxTQUFTLENBQ0osT0FBTyxDQUFFLElBQUksQ0FBRSxDQUNmLE1BQU0sQ0FBRTtXQUFNLFlBQVksQ0FBQyxJQUFJLEVBQUU7Q0FBQSxDQUFFLENBQUE7O0FBRXhDLFNBQVMsQ0FBQyxLQUFLLENBQUUsT0FBTyxDQUFDLElBQUksQ0FBRSxDQUFBOztBQUUvQixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGNvbW1hbmRzOlxuICogIHNldHVwXG4gKiAgICAgIOWcqOW9k+WJjeebruW9leS4i+iOt+WPllxuICogIGNvbmZpZyhjKVxuICogIHJ1bihyKVxuICogIHN0b3AocylcbiAqL1xuXG5yZXF1aXJlKCAnLi9sb2cnIClcbnJlcXVpcmUoICcuL3Byb2ZpbGUnIClcblxubGV0IENvbW1hbmRlciAgICAgICAgICA9IHJlcXVpcmUoICdjb21tYW5kZXInICksXG4gICAgTW9tZW50ICAgICAgICAgICAgID0gcmVxdWlyZSggJ21vbWVudCcgKSxcbiAgICBPcGVuICAgICAgICAgICAgICAgPSByZXF1aXJlKCAnb3BlbicgKSxcbiAgICBUYWlsICAgICAgICAgICAgICAgPSByZXF1aXJlKCAndGFpbCcgKS5UYWlsLFxuICAgIENvbmZpZ0NMSSAgICAgICAgICA9IHJlcXVpcmUoICcuL2NsaS9jb25maWcnICksXG4gICAgU2V0dXBDTEkgICAgICAgICAgID0gcmVxdWlyZSggJy4vY2xpL3NldHVwJyApLFxuICAgIFdvcmtTcGFjZUNMSSAgICAgICA9IHJlcXVpcmUoICcuL2NsaS93b3Jrc3BhY2UnICksXG4gICAgV29ya1NwYWNlICAgICAgICAgID0gcmVxdWlyZSggJy4vY29yZS93b3Jrc3BhY2UnICksXG4gICAgVXBkYXRlICAgICAgICAgICAgID0gcmVxdWlyZSggJy4vdXBkYXRlJyApLFxuICAgIHBrZyAgICAgICAgICAgICAgICA9IHJlcXVpcmUoICcuLi9wYWNrYWdlLmpzb24nICksXG4gICAgbG9nVmFsdWVzICAgICAgICAgID0geyAncyc6IDEsICdqcyc6IDEgfSxcblxuICAgIGZpbmRWYWxpZFdvcmtzcGFjZSA9IGFzeW5jIGRpciA9PiB7XG4gICAgICAgIGxldCBpc1ZhbGlkID0gYXdhaXQgV29ya1NwYWNlLmlzVmFsaWRXb3JrU3BhY2UoIGRpciApXG5cbiAgICAgICAgaWYgKCAhaXNWYWxpZCApIHtcbiAgICAgICAgICAgIGRpciAgICAgPSBXb3JrU3BhY2UuY3VycmVudCgpXG4gICAgICAgICAgICBpc1ZhbGlkID0gYXdhaXQgV29ya1NwYWNlLmlzVmFsaWRXb3JrU3BhY2UoIGRpciApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIGlzVmFsaWQgKSB7XG4gICAgICAgICAgICByZXR1cm4geyBpc1ZhbGlkLCBkaXIgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nKCAn5peg5rOV5om+5Yiw5Y+v6L+Q6KGM55qE5bel5L2c56m66Ze0JywgJ2Vycm9yJyApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JcbiAgICAgICAgfVxuICAgIH1cblxuQ29tbWFuZGVyXG4gICAgLnZlcnNpb24oIHBrZy52ZXJzaW9uLCAnLXYsIC0tdmVyc2lvbicgKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3NldHVwIFtkaXJdIFt1cmxdJyApXG4gICAgLmFjdGlvbiggKCBkaXIsIHVybCApICA9PiBuZXcgU2V0dXBDTEkoIGRpciB8fCAnJywgdXJsIHx8ICcnICkgKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ2NvbmZpZyBbZGlyXScgKVxuICAgIC5hbGlhcyggJ2MnIClcbiAgICAuYWN0aW9uKCAoIGRpciA9IHByb2Nlc3MuY3dkKCkgKSAgPT4gbmV3IENvbmZpZ0NMSSggZGlyICkgKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3J1bicgKVxuICAgIC5hbGlhcyggJ3InIClcbiAgICAuYWN0aW9uKCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBmaW5kVmFsaWRXb3Jrc3BhY2UoIHByb2Nlc3MuY3dkKCkgKVxuICAgICAgICBuZXcgV29ya1NwYWNlKCByZXN1bHQuZGlyICkuc3RhcnQoKVxuICAgIH0gKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3N0b3AgW2lzQWxsXScgKVxuICAgIC5hbGlhcyggJ3MnIClcbiAgICAuYWN0aW9uKCBhc3luYyAoIGlzQWxsID0gZmFsc2UgKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBmaW5kVmFsaWRXb3Jrc3BhY2UoIHByb2Nlc3MuY3dkKCkgKVxuICAgICAgICBuZXcgV29ya1NwYWNlKCByZXN1bHQuZGlyICkuc3RvcCggaXNBbGwgKVxuICAgIH0gKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3NhJyApXG4gICAgLmFjdGlvbiggYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgZmluZFZhbGlkV29ya3NwYWNlKCBwcm9jZXNzLmN3ZCgpIClcbiAgICAgICAgbmV3IFdvcmtTcGFjZSggcmVzdWx0LmRpciApLnN0b3AoICdhbGwnIClcbiAgICB9IClcblxuQ29tbWFuZGVyXG4gICAgLmNvbW1hbmQoICdsb2cgW3R5cGVdJyApXG4gICAgLmFsaWFzKCAnbCcgKVxuICAgIC5hY3Rpb24oICggdHlwZSA9ICdzJyApID0+IHtcbiAgICAgICAgaWYgKCB0eXBlIGluIGxvZ1ZhbHVlcyApIHtcbiAgICAgICAgICAgIGxldCBkYXRlID0gTW9tZW50KCkuZm9ybWF0KCAnWVlZWS9NTS9ERCcgKSxcbiAgICAgICAgICAgICAgICB0YWlsID0gbmV3IFRhaWwoIGAvdG1wL2xvZy9uZXN0LSR7dHlwZX1lcnZlci8ke2RhdGV9LmxvZ2AgKVxuXG4gICAgICAgICAgICB0YWlsXG4gICAgICAgICAgICAgICAgLm9uKCAnbGluZScsIGRhdGEgPT4gbG9nKCBkYXRhICkgKVxuICAgICAgICAgICAgICAgIC5vbiggJ2Vycm9yJywgKCkgPT4gdGFpbC51bndhdGNoKCkgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nKCAnbG9nIOWPquaOpeWPlyBzL2pzIOS4pOS4quWPguaVsCcsICdlcnJvcicgKVxuICAgICAgICB9XG4gICAgfSApXG5cbkNvbW1hbmRlclxuICAgIC5jb21tYW5kKCAnbG8nIClcbiAgICAuYWN0aW9uKCAoKSA9PiB7XG4gICAgICAgIGxldCBkYXRlID0gTW9tZW50KCkuZm9ybWF0KCAnWVlZWS9NTS8nIClcblxuICAgICAgICBPcGVuKCBgL3RtcC9sb2cvbmVzdC1zZXJ2ZXIvJHtkYXRlfWAsICdmaW5kZXInIClcbiAgICB9IClcblxuQ29tbWFuZGVyXG4gICAgLmNvbW1hbmQoICdscycgKVxuICAgIC5hY3Rpb24oICgpID0+IFdvcmtTcGFjZUNMSS5saXN0KCkgKVxuXG5Db21tYW5kZXIucGFyc2UoIHByb2Nlc3MuYXJndiApXG5cblVwZGF0ZS5jaGVjaygpXG4iXX0=