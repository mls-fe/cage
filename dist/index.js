/**
 * commands:
 *  setup
 *      在当前目录下获取
 *  config(c)
 *  run(r)
 *  stop(s)
 */

'use strict';

var _bluebird = require('bluebird');

require('./log');
require('./profile');

var Commander = require('commander'),
    Moment = require('moment'),
    Open = require('open'),
    Tail = require('tail').Tail,
    ConfigCLI = require('./cli/config'),
    SetupCLI = require('./cli/setup'),
    WorkSpaceCLI = require('./cli/workspace'),
    WorkSpace = require('./core/workspace'),
    Update = require('./update'),
    pkg = require('../package.json'),
    logValues = { 's': 1, 'js': 1 },
    findValidWorkspace = _bluebird.coroutine(function* (dir) {
    var isValid = yield WorkSpace.isValidWorkSpace(dir);

    if (!isValid) {
        dir = WorkSpace.current();
        isValid = yield WorkSpace.isValidWorkSpace(dir);
    }

    if (isValid) {
        return { isValid: isValid, dir: dir };
    } else {
        log('无法找到可运行的工作空间', 'error');
        throw new Error();
    }
});

Commander.version(pkg.version, '-v, --version');

Commander.command('setup').action(function () {
    return new SetupCLI();
});

Commander.command('config [dir]').alias('c').action(function () {
    var dir = arguments[0] === undefined ? process.cwd() : arguments[0];
    return new ConfigCLI(dir);
});

Commander.command('run').alias('r').action(_bluebird.coroutine(function* () {
    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).start();
}));

Commander.command('stop [isAll]').alias('s').action(_bluebird.coroutine(function* () {
    var isAll = arguments[0] === undefined ? false : arguments[0];

    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).stop(isAll);
}));

Commander.command('sa').action(_bluebird.coroutine(function* () {
    var result = yield findValidWorkspace(process.cwd());
    new WorkSpace(result.dir).stop('all');
}));

Commander.command('log [type]').alias('l').action(function () {
    var type = arguments[0] === undefined ? 's' : arguments[0];

    if (type in logValues) {
        (function () {
            var date = Moment().format('YYYY/MM/DD'),
                tail = new Tail('/tmp/log/nest-' + type + 'erver/' + date + '.log');

            tail.on('line', function (data) {
                return log(data);
            }).on('error', function () {
                return tail.unwatch();
            });
        })();
    } else {
        log('log 只接受 s/js 两个参数', 'error');
    }
});

Commander.command('lo').action(function () {
    var date = Moment().format('YYYY/MM/');

    Open('/tmp/log/nest-server/' + date, 'finder');
});

Commander.command('ls').action(function () {
    return WorkSpaceCLI.list();
});

Commander.parse(process.argv);

Update.check();
//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUU7V0FBTSxZQUFZLENBQUMsSUFBSSxFQUFFO0NBQUEsQ0FBRSxDQUFBOztBQUV4QyxTQUFTLENBQUMsS0FBSyxDQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUUsQ0FBQTs7QUFFL0IsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBjb21tYW5kczpcbiAqICBzZXR1cFxuICogICAgICDlnKjlvZPliY3nm67lvZXkuIvojrflj5ZcbiAqICBjb25maWcoYylcbiAqICBydW4ocilcbiAqICBzdG9wKHMpXG4gKi9cblxucmVxdWlyZSggJy4vbG9nJyApXG5yZXF1aXJlKCAnLi9wcm9maWxlJyApXG5cbmxldCBDb21tYW5kZXIgICAgICAgICAgPSByZXF1aXJlKCAnY29tbWFuZGVyJyApLFxuICAgIE1vbWVudCAgICAgICAgICAgICA9IHJlcXVpcmUoICdtb21lbnQnICksXG4gICAgT3BlbiAgICAgICAgICAgICAgID0gcmVxdWlyZSggJ29wZW4nICksXG4gICAgVGFpbCAgICAgICAgICAgICAgID0gcmVxdWlyZSggJ3RhaWwnICkuVGFpbCxcbiAgICBDb25maWdDTEkgICAgICAgICAgPSByZXF1aXJlKCAnLi9jbGkvY29uZmlnJyApLFxuICAgIFNldHVwQ0xJICAgICAgICAgICA9IHJlcXVpcmUoICcuL2NsaS9zZXR1cCcgKSxcbiAgICBXb3JrU3BhY2VDTEkgICAgICAgPSByZXF1aXJlKCAnLi9jbGkvd29ya3NwYWNlJyApLFxuICAgIFdvcmtTcGFjZSAgICAgICAgICA9IHJlcXVpcmUoICcuL2NvcmUvd29ya3NwYWNlJyApLFxuICAgIFVwZGF0ZSAgICAgICAgICAgICA9IHJlcXVpcmUoICcuL3VwZGF0ZScgKSxcbiAgICBwa2cgICAgICAgICAgICAgICAgPSByZXF1aXJlKCAnLi4vcGFja2FnZS5qc29uJyApLFxuICAgIGxvZ1ZhbHVlcyAgICAgICAgICA9IHsgJ3MnOiAxLCAnanMnOiAxIH0sXG5cbiAgICBmaW5kVmFsaWRXb3Jrc3BhY2UgPSBhc3luYyBkaXIgPT4ge1xuICAgICAgICBsZXQgaXNWYWxpZCA9IGF3YWl0IFdvcmtTcGFjZS5pc1ZhbGlkV29ya1NwYWNlKCBkaXIgKVxuXG4gICAgICAgIGlmICggIWlzVmFsaWQgKSB7XG4gICAgICAgICAgICBkaXIgICAgID0gV29ya1NwYWNlLmN1cnJlbnQoKVxuICAgICAgICAgICAgaXNWYWxpZCA9IGF3YWl0IFdvcmtTcGFjZS5pc1ZhbGlkV29ya1NwYWNlKCBkaXIgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBpc1ZhbGlkICkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZCwgZGlyIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZyggJ+aXoOazleaJvuWIsOWPr+i/kOihjOeahOW3peS9nOepuumXtCcsICdlcnJvcicgKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXG4gICAgICAgIH1cbiAgICB9XG5cbkNvbW1hbmRlclxuICAgIC52ZXJzaW9uKCBwa2cudmVyc2lvbiwgJy12LCAtLXZlcnNpb24nIClcblxuQ29tbWFuZGVyXG4gICAgLmNvbW1hbmQoICdzZXR1cCcgKVxuICAgIC5hY3Rpb24oICgpICA9PiBuZXcgU2V0dXBDTEkgKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ2NvbmZpZyBbZGlyXScgKVxuICAgIC5hbGlhcyggJ2MnIClcbiAgICAuYWN0aW9uKCAoIGRpciA9IHByb2Nlc3MuY3dkKCkgKSAgPT4gbmV3IENvbmZpZ0NMSSggZGlyICkgKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3J1bicgKVxuICAgIC5hbGlhcyggJ3InIClcbiAgICAuYWN0aW9uKCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBmaW5kVmFsaWRXb3Jrc3BhY2UoIHByb2Nlc3MuY3dkKCkgKVxuICAgICAgICBuZXcgV29ya1NwYWNlKCByZXN1bHQuZGlyICkuc3RhcnQoKVxuICAgIH0gKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3N0b3AgW2lzQWxsXScgKVxuICAgIC5hbGlhcyggJ3MnIClcbiAgICAuYWN0aW9uKCBhc3luYyAoIGlzQWxsID0gZmFsc2UgKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBmaW5kVmFsaWRXb3Jrc3BhY2UoIHByb2Nlc3MuY3dkKCkgKVxuICAgICAgICBuZXcgV29ya1NwYWNlKCByZXN1bHQuZGlyICkuc3RvcCggaXNBbGwgKVxuICAgIH0gKVxuXG5Db21tYW5kZXJcbiAgICAuY29tbWFuZCggJ3NhJyApXG4gICAgLmFjdGlvbiggYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgZmluZFZhbGlkV29ya3NwYWNlKCBwcm9jZXNzLmN3ZCgpIClcbiAgICAgICAgbmV3IFdvcmtTcGFjZSggcmVzdWx0LmRpciApLnN0b3AoICdhbGwnIClcbiAgICB9IClcblxuQ29tbWFuZGVyXG4gICAgLmNvbW1hbmQoICdsb2cgW3R5cGVdJyApXG4gICAgLmFsaWFzKCAnbCcgKVxuICAgIC5hY3Rpb24oICggdHlwZSA9ICdzJyApID0+IHtcbiAgICAgICAgaWYgKCB0eXBlIGluIGxvZ1ZhbHVlcyApIHtcbiAgICAgICAgICAgIGxldCBkYXRlID0gTW9tZW50KCkuZm9ybWF0KCAnWVlZWS9NTS9ERCcgKSxcbiAgICAgICAgICAgICAgICB0YWlsID0gbmV3IFRhaWwoIGAvdG1wL2xvZy9uZXN0LSR7dHlwZX1lcnZlci8ke2RhdGV9LmxvZ2AgKVxuXG4gICAgICAgICAgICB0YWlsXG4gICAgICAgICAgICAgICAgLm9uKCAnbGluZScsIGRhdGEgPT4gbG9nKCBkYXRhICkgKVxuICAgICAgICAgICAgICAgIC5vbiggJ2Vycm9yJywgKCkgPT4gdGFpbC51bndhdGNoKCkgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nKCAnbG9nIOWPquaOpeWPlyBzL2pzIOS4pOS4quWPguaVsCcsICdlcnJvcicgKVxuICAgICAgICB9XG4gICAgfSApXG5cbkNvbW1hbmRlclxuICAgIC5jb21tYW5kKCAnbG8nIClcbiAgICAuYWN0aW9uKCAoKSA9PiB7XG4gICAgICAgIGxldCBkYXRlID0gTW9tZW50KCkuZm9ybWF0KCAnWVlZWS9NTS8nIClcblxuICAgICAgICBPcGVuKCBgL3RtcC9sb2cvbmVzdC1zZXJ2ZXIvJHtkYXRlfWAsICdmaW5kZXInIClcbiAgICB9IClcblxuQ29tbWFuZGVyXG4gICAgLmNvbW1hbmQoICdscycgKVxuICAgIC5hY3Rpb24oICgpID0+IFdvcmtTcGFjZUNMSS5saXN0KCkgKVxuXG5Db21tYW5kZXIucGFyc2UoIHByb2Nlc3MuYXJndiApXG5cblVwZGF0ZS5jaGVjaygpXG4iXX0=