'use strict';

var _bluebird = require('bluebird');

var Promise = require('bluebird'),
    ObjectAssign = require('object-assign'),
    GetMac = Promise.promisifyAll(require('getmac')),
    Got = Promise.promisifyAll(require('got')),
    FS = Promise.promisifyAll(require('fs')),
    Key = require('./key'),
    Const = require('./const'),
    count = 0,
    stdout = process.stdout,
    Cache = {},
    Util = undefined,
    Indicator = undefined,
    timeoutID = undefined;

var URL_SERVER = Const.URL_SERVER,
    ACTION_UPDATE = 'update?ukey=',
    ACTION_DOMAIN = 'host',
    MAC = Key.mac,
    IP = Key.ip,
    APPS = Const.APPS,
    NEST = Const.NEST,
    TIMEOUT = 5000;

Indicator = {
    start: function start() {
        var text = arguments[0] === undefined ? 'waiting' : arguments[0];

        count = 0;
        timeoutID = setInterval(function () {
            count = (count + 1) % 5;
            var dots = new Array(count).join('.');

            stdout.clearLine();
            stdout.cursorTo(0);
            stdout.write(text + dots);
        }, 300);
    },

    stop: function stop() {
        clearTimeout(timeoutID);
        stdout.clearLine();
        stdout.cursorTo(0);
    }
};

module.exports = Util = {
    indicator: Indicator,

    updateJSONFile: function updateJSONFile(path, content) {
        content = JSON.stringify(ObjectAssign({}, require(path), content));
        return FS.writeFileAsync(path, content);
    },

    checkFileExist: function checkFileExist(path) {
        return new Promise(function (resolve) {
            FS.exists(path, function (isExist) {
                resolve(isExist);
            });
        });
    },

    getPort: function getPort(basePath) {
        return require(basePath + Const.FILE_ETC).onPort;
    },

    getIP: _bluebird.coroutine(function* () {
        var result = yield Got.getAsync(URL_SERVER + IP, {
            timeout: TIMEOUT
        });

        return result[0];
    }),

    getMac: _bluebird.coroutine(function* () {
        var mac = Cache[MAC] || (yield GetMac.getMacAsync());

        if (!mac) {
            log('获取 MAC 地址失败', 'error');
        }

        return Cache[MAC] = mac;
    }),

    updateMac: _bluebird.coroutine(function* (mac) {
        var res = yield Got.getAsync(URL_SERVER + ACTION_UPDATE + mac, {
            json: true,
            timeout: TIMEOUT
        });

        if (res && res[0].updated) {
            return true;
        }

        Indicator.stop();
        log('更新 IP 地址失败', 'error');
    }),

    updateProxy: _bluebird.coroutine(function* (port, params) {
        var mac = yield this.getMac(),
            url = URL_SERVER + 'host?port=' + port + '&ukey=' + mac + '&' + params;

        return Got.getAsync(url, {
            timeout: TIMEOUT
        });
    })
};
//# sourceMappingURL=data:application/json;base64,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RUFBRTtZQUN6QixHQUFHLEdBQU0sVUFBVSxrQkFBYSxJQUFJLGNBQVMsR0FBRyxTQUFJLE1BQU0sQUFBRSxDQUFBOztBQUVoRSxlQUFPLEdBQUcsQ0FDTCxRQUFRLENBQUUsR0FBRyxFQUFFO0FBQ1osbUJBQU8sRUFBRSxPQUFPO1NBQ25CLENBQUUsQ0FBQTtLQUNWLENBQUE7Q0FDSixDQUFBIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUHJvbWlzZSAgICAgID0gcmVxdWlyZSggJ2JsdWViaXJkJyApLFxuICAgIE9iamVjdEFzc2lnbiA9IHJlcXVpcmUoICdvYmplY3QtYXNzaWduJyApLFxuICAgIEdldE1hYyAgICAgICA9IFByb21pc2UucHJvbWlzaWZ5QWxsKCByZXF1aXJlKCAnZ2V0bWFjJyApICksXG4gICAgR290ICAgICAgICAgID0gUHJvbWlzZS5wcm9taXNpZnlBbGwoIHJlcXVpcmUoICdnb3QnICkgKSxcbiAgICBGUyAgICAgICAgICAgPSBQcm9taXNlLnByb21pc2lmeUFsbCggcmVxdWlyZSggJ2ZzJyApICksXG4gICAgS2V5ICAgICAgICAgID0gcmVxdWlyZSggJy4va2V5JyApLFxuICAgIENvbnN0ICAgICAgICA9IHJlcXVpcmUoICcuL2NvbnN0JyApLFxuICAgIGNvdW50ICAgICAgICA9IDAsXG4gICAgc3Rkb3V0ICAgICAgID0gcHJvY2Vzcy5zdGRvdXQsXG4gICAgQ2FjaGUgICAgICAgID0ge30sXG4gICAgVXRpbCwgSW5kaWNhdG9yLCB0aW1lb3V0SURcblxuY29uc3QgVVJMX1NFUlZFUiAgICA9IENvbnN0LlVSTF9TRVJWRVIsXG4gICAgICBBQ1RJT05fVVBEQVRFID0gJ3VwZGF0ZT91a2V5PScsXG4gICAgICBBQ1RJT05fRE9NQUlOID0gJ2hvc3QnLFxuICAgICAgTUFDICAgICAgICAgICA9IEtleS5tYWMsXG4gICAgICBJUCAgICAgICAgICAgID0gS2V5LmlwLFxuICAgICAgQVBQUyAgICAgICAgICA9IENvbnN0LkFQUFMsXG4gICAgICBORVNUICAgICAgICAgID0gQ29uc3QuTkVTVCxcbiAgICAgIFRJTUVPVVQgICAgICAgPSA1MDAwXG5cbkluZGljYXRvciA9IHtcbiAgICBzdGFydCggdGV4dCA9ICd3YWl0aW5nJyApIHtcbiAgICAgICAgY291bnQgICAgID0gMFxuICAgICAgICB0aW1lb3V0SUQgPSBzZXRJbnRlcnZhbCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb3VudCAgICA9ICggY291bnQgKyAxICkgJSA1XG4gICAgICAgICAgICBsZXQgZG90cyA9IG5ldyBBcnJheSggY291bnQgKS5qb2luKCAnLicgKVxuXG4gICAgICAgICAgICBzdGRvdXQuY2xlYXJMaW5lKClcbiAgICAgICAgICAgIHN0ZG91dC5jdXJzb3JUbyggMCApXG4gICAgICAgICAgICBzdGRvdXQud3JpdGUoIHRleHQgKyBkb3RzIClcbiAgICAgICAgfSwgMzAwIClcbiAgICB9LFxuXG4gICAgc3RvcCgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0SUQgKVxuICAgICAgICBzdGRvdXQuY2xlYXJMaW5lKClcbiAgICAgICAgc3Rkb3V0LmN1cnNvclRvKCAwIClcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbCA9IHtcbiAgICBpbmRpY2F0b3I6IEluZGljYXRvcixcblxuICAgIHVwZGF0ZUpTT05GaWxlKCBwYXRoLCBjb250ZW50ICkge1xuICAgICAgICBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoIE9iamVjdEFzc2lnbigge30sIHJlcXVpcmUoIHBhdGggKSwgY29udGVudCApIClcbiAgICAgICAgcmV0dXJuIEZTLndyaXRlRmlsZUFzeW5jKCBwYXRoLCBjb250ZW50IClcbiAgICB9LFxuXG4gICAgY2hlY2tGaWxlRXhpc3QoIHBhdGggKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBGUy5leGlzdHMoIHBhdGgsIGlzRXhpc3QgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoIGlzRXhpc3QgKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuICAgIH0sXG5cbiAgICBnZXRQb3J0KCBiYXNlUGF0aCApIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoIGJhc2VQYXRoICsgQ29uc3QuRklMRV9FVEMgKS5vblBvcnRcbiAgICB9LFxuXG4gICAgYXN5bmMgZ2V0SVAoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBHb3QuZ2V0QXN5bmMoIFVSTF9TRVJWRVIgKyBJUCwge1xuICAgICAgICAgICAgdGltZW91dDogVElNRU9VVFxuICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gcmVzdWx0WyAwIF1cbiAgICB9LFxuXG4gICAgYXN5bmMgZ2V0TWFjKCkge1xuICAgICAgICBsZXQgbWFjID0gQ2FjaGVbIE1BQyBdIHx8IGF3YWl0IEdldE1hYy5nZXRNYWNBc3luYygpXG5cbiAgICAgICAgaWYgKCAhbWFjICkge1xuICAgICAgICAgICAgbG9nKCAn6I635Y+WIE1BQyDlnLDlnYDlpLHotKUnLCAnZXJyb3InIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBDYWNoZVsgTUFDIF0gPSBtYWNcbiAgICB9LFxuXG4gICAgYXN5bmMgdXBkYXRlTWFjKCBtYWMgKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBHb3QuZ2V0QXN5bmMoIFVSTF9TRVJWRVIgKyBBQ1RJT05fVVBEQVRFICsgbWFjLCB7XG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgdGltZW91dDogVElNRU9VVFxuICAgICAgICB9IClcblxuICAgICAgICBpZiAoIHJlcyAmJiByZXNbIDAgXS51cGRhdGVkICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIEluZGljYXRvci5zdG9wKClcbiAgICAgICAgbG9nKCAn5pu05pawIElQIOWcsOWdgOWksei0pScsICdlcnJvcicgKVxuICAgIH0sXG5cbiAgICBhc3luYyB1cGRhdGVQcm94eSggcG9ydCwgcGFyYW1zICkge1xuICAgICAgICBsZXQgbWFjID0gYXdhaXQgdGhpcy5nZXRNYWMoKSxcbiAgICAgICAgICAgIHVybCA9IGAke1VSTF9TRVJWRVJ9aG9zdD9wb3J0PSR7cG9ydH0mdWtleT0ke21hY30mJHtwYXJhbXN9YFxuXG4gICAgICAgIHJldHVybiBHb3RcbiAgICAgICAgICAgIC5nZXRBc3luYyggdXJsLCB7XG4gICAgICAgICAgICAgICAgdGltZW91dDogVElNRU9VVFxuICAgICAgICAgICAgfSApXG4gICAgfVxufVxuIl19