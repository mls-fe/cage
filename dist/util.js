'use strict';

var _bluebird = require('bluebird');

var Promise = require('bluebird'),
    ObjectAssign = require('object-assign'),
    GetMac = Promise.promisifyAll(require('getmac')),
    Got = Promise.promisifyAll(require('got')),
    FS = Promise.promisifyAll(require('fs')),
    Key = require('./key'),
    Const = require('./const'),
    count = 0,
    stdout = process.stdout,
    Cache = {},
    Util = undefined,
    Indicator = undefined,
    timeoutID = undefined;

var URL_SERVER = Const.URL_SERVER,
    ACTION_UPDATE = 'update?ukey=',
    ACTION_DOMAIN = 'host',
    MAC = Key.mac,
    IP = Key.ip,
    APPS = Const.APPS,
    NEST = Const.NEST,
    TIMEOUT = 5000;

Indicator = {
    start: function start() {
        var text = arguments[0] === undefined ? 'waiting' : arguments[0];

        count = 0;
        timeoutID = setInterval(function () {
            count = (count + 1) % 5;
            var dots = new Array(count).join('.');

            stdout.clearLine();
            stdout.cursorTo(0);
            stdout.write(text + dots);
        }, 300);
    },

    stop: function stop() {
        clearTimeout(timeoutID);
        stdout.clearLine();
        stdout.cursorTo(0);
    }
};

module.exports = Util = {
    indicator: Indicator,

    updateJSONFile: function updateJSONFile(path, content) {
        content = JSON.stringify(ObjectAssign({}, require(path), content));
        return FS.writeFileAsync(path, content);
    },

    checkFileExist: function checkFileExist(path) {
        return new Promise(function (resolve) {
            FS.exists(path, function (isExist) {
                resolve(isExist);
            });
        });
    },

    getPort: function getPort() {
        var basePath = Profile.get(Key.current_path),
            etcPath = basePath + Const.FILE_ETC;

        return require(etcPath).onPort;
    },

    getIP: _bluebird.coroutine(function* () {
        var result = yield Got.getAsync(URL_SERVER + IP, {
            timeout: TIMEOUT
        });

        return result[0];
    }),

    getMac: _bluebird.coroutine(function* () {
        var mac = Cache[MAC] || (yield GetMac.getMacAsync());

        if (!mac) {
            log('获取 MAC 地址失败', 'error');
        }

        return Cache[MAC] = mac;
    }),

    updateMac: _bluebird.coroutine(function* (mac) {
        var res = yield Got.getAsync(URL_SERVER + ACTION_UPDATE + mac, {
            json: true,
            timeout: TIMEOUT
        });

        if (res && res[0].updated) {
            return true;
        }

        Indicator.stop();
        log('更新 IP 地址失败', 'error');
    }),

    updateProxy: _bluebird.coroutine(function* (port, params) {
        var mac = yield this.getMac(),
            url = URL_SERVER + 'host?port=' + port + '&ukey=' + mac + '&' + params;

        return Got.getAsync(url, {
            timeout: TIMEOUT
        });
    })
};
//# sourceMappingURL=data:application/json;base64,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ZUFBVyxzQkFBQSxXQUFFLElBQUksRUFBRSxNQUFNLEVBQUc7QUFDOUIsWUFBSSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3pCLEdBQUcsR0FBTSxVQUFVLGtCQUFhLElBQUksY0FBUyxHQUFHLFNBQUksTUFBTSxBQUFFLENBQUE7O0FBRWhFLGVBQU8sR0FBRyxDQUNMLFFBQVEsQ0FBRSxHQUFHLEVBQUU7QUFDWixtQkFBTyxFQUFFLE9BQU87U0FDbkIsQ0FBRSxDQUFBO0tBQ1YsQ0FBQTtDQUNKLENBQUEiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQcm9taXNlICAgICAgPSByZXF1aXJlKCAnYmx1ZWJpcmQnICksXG4gICAgT2JqZWN0QXNzaWduID0gcmVxdWlyZSggJ29iamVjdC1hc3NpZ24nICksXG4gICAgR2V0TWFjICAgICAgID0gUHJvbWlzZS5wcm9taXNpZnlBbGwoIHJlcXVpcmUoICdnZXRtYWMnICkgKSxcbiAgICBHb3QgICAgICAgICAgPSBQcm9taXNlLnByb21pc2lmeUFsbCggcmVxdWlyZSggJ2dvdCcgKSApLFxuICAgIEZTICAgICAgICAgICA9IFByb21pc2UucHJvbWlzaWZ5QWxsKCByZXF1aXJlKCAnZnMnICkgKSxcbiAgICBLZXkgICAgICAgICAgPSByZXF1aXJlKCAnLi9rZXknICksXG4gICAgQ29uc3QgICAgICAgID0gcmVxdWlyZSggJy4vY29uc3QnICksXG4gICAgY291bnQgICAgICAgID0gMCxcbiAgICBzdGRvdXQgICAgICAgPSBwcm9jZXNzLnN0ZG91dCxcbiAgICBDYWNoZSAgICAgICAgPSB7fSxcbiAgICBVdGlsLCBJbmRpY2F0b3IsIHRpbWVvdXRJRFxuXG5jb25zdCBVUkxfU0VSVkVSICAgID0gQ29uc3QuVVJMX1NFUlZFUixcbiAgICAgIEFDVElPTl9VUERBVEUgPSAndXBkYXRlP3VrZXk9JyxcbiAgICAgIEFDVElPTl9ET01BSU4gPSAnaG9zdCcsXG4gICAgICBNQUMgICAgICAgICAgID0gS2V5Lm1hYyxcbiAgICAgIElQICAgICAgICAgICAgPSBLZXkuaXAsXG4gICAgICBBUFBTICAgICAgICAgID0gQ29uc3QuQVBQUyxcbiAgICAgIE5FU1QgICAgICAgICAgPSBDb25zdC5ORVNULFxuICAgICAgVElNRU9VVCAgICAgICA9IDUwMDBcblxuSW5kaWNhdG9yID0ge1xuICAgIHN0YXJ0KCB0ZXh0ID0gJ3dhaXRpbmcnICkge1xuICAgICAgICBjb3VudCAgICAgPSAwXG4gICAgICAgIHRpbWVvdXRJRCA9IHNldEludGVydmFsKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvdW50ICAgID0gKCBjb3VudCArIDEgKSAlIDVcbiAgICAgICAgICAgIGxldCBkb3RzID0gbmV3IEFycmF5KCBjb3VudCApLmpvaW4oICcuJyApXG5cbiAgICAgICAgICAgIHN0ZG91dC5jbGVhckxpbmUoKVxuICAgICAgICAgICAgc3Rkb3V0LmN1cnNvclRvKCAwIClcbiAgICAgICAgICAgIHN0ZG91dC53cml0ZSggdGV4dCArIGRvdHMgKVxuICAgICAgICB9LCAzMDAgKVxuICAgIH0sXG5cbiAgICBzdG9wKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXRJRCApXG4gICAgICAgIHN0ZG91dC5jbGVhckxpbmUoKVxuICAgICAgICBzdGRvdXQuY3Vyc29yVG8oIDAgKVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsID0ge1xuICAgIGluZGljYXRvcjogSW5kaWNhdG9yLFxuXG4gICAgdXBkYXRlSlNPTkZpbGUoIHBhdGgsIGNvbnRlbnQgKSB7XG4gICAgICAgIGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeSggT2JqZWN0QXNzaWduKCB7fSwgcmVxdWlyZSggcGF0aCApLCBjb250ZW50ICkgKVxuICAgICAgICByZXR1cm4gRlMud3JpdGVGaWxlQXN5bmMoIHBhdGgsIGNvbnRlbnQgKVxuICAgIH0sXG5cbiAgICBjaGVja0ZpbGVFeGlzdCggcGF0aCApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcbiAgICAgICAgICAgIEZTLmV4aXN0cyggcGF0aCwgaXNFeGlzdCA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSggaXNFeGlzdCApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgfSxcblxuICAgIGdldFBvcnQoKSB7XG4gICAgICAgIGxldCBiYXNlUGF0aCA9IFByb2ZpbGUuZ2V0KCBLZXkuY3VycmVudF9wYXRoICksXG4gICAgICAgICAgICBldGNQYXRoICA9IGJhc2VQYXRoICsgQ29uc3QuRklMRV9FVENcblxuICAgICAgICByZXR1cm4gcmVxdWlyZSggZXRjUGF0aCApLm9uUG9ydFxuICAgIH0sXG5cbiAgICBhc3luYyBnZXRJUCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IEdvdC5nZXRBc3luYyggVVJMX1NFUlZFUiArIElQLCB7XG4gICAgICAgICAgICB0aW1lb3V0OiBUSU1FT1VUXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHJldHVybiByZXN1bHRbIDAgXVxuICAgIH0sXG5cbiAgICBhc3luYyBnZXRNYWMoKSB7XG4gICAgICAgIGxldCBtYWMgPSBDYWNoZVsgTUFDIF0gfHwgYXdhaXQgR2V0TWFjLmdldE1hY0FzeW5jKClcblxuICAgICAgICBpZiAoICFtYWMgKSB7XG4gICAgICAgICAgICBsb2coICfojrflj5YgTUFDIOWcsOWdgOWksei0pScsICdlcnJvcicgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIENhY2hlWyBNQUMgXSA9IG1hY1xuICAgIH0sXG5cbiAgICBhc3luYyB1cGRhdGVNYWMoIG1hYyApIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IEdvdC5nZXRBc3luYyggVVJMX1NFUlZFUiArIEFDVElPTl9VUERBVEUgKyBtYWMsIHtcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICB0aW1lb3V0OiBUSU1FT1VUXG4gICAgICAgIH0gKVxuXG4gICAgICAgIGlmICggcmVzICYmIHJlc1sgMCBdLnVwZGF0ZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgSW5kaWNhdG9yLnN0b3AoKVxuICAgICAgICBsb2coICfmm7TmlrAgSVAg5Zyw5Z2A5aSx6LSlJywgJ2Vycm9yJyApXG4gICAgfSxcblxuICAgIGFzeW5jIHVwZGF0ZVByb3h5KCBwb3J0LCBwYXJhbXMgKSB7XG4gICAgICAgIGxldCBtYWMgPSBhd2FpdCB0aGlzLmdldE1hYygpLFxuICAgICAgICAgICAgdXJsID0gYCR7VVJMX1NFUlZFUn1ob3N0P3BvcnQ9JHtwb3J0fSZ1a2V5PSR7bWFjfSYke3BhcmFtc31gXG5cbiAgICAgICAgcmV0dXJuIEdvdFxuICAgICAgICAgICAgLmdldEFzeW5jKCB1cmwsIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiBUSU1FT1VUXG4gICAgICAgICAgICB9IClcbiAgICB9XG59XG4iXX0=