'use strict';

var HTTP = require('http'),
    Const = require('./const'),
    timeoutLimit = 5000,
    host = Const.URL_SERVER,
    port = Const.URL_PORT,
    Request = void 0;

Request = function Request(path) {
    path = path.trim();

    return new Promise(function (resolve, reject) {
        var result = '',
            option = {
            host: host, port: port, path: path
        },
            timeoutID = void 0,
            req = void 0;

        req = HTTP.request(option, function (res) {
            clearTimeout(timeoutID);
            res.setEncoding('utf8');

            res.on('data', function (data) {
                result += data;
            });

            res.on('end', function () {
                try {
                    result = JSON.parse(result);
                } catch (e) {
                    result = {
                        code: -1,
                        msg: '服务器端返回的不是有效的 JSON 格式:\n                            ' + result
                    };
                } finally {
                    resolve(result);
                }
            });
        });

        log('http://' + host + ':' + port + path, 'debug');

        req.setTimeout(timeoutLimit, function () {
            reject({
                code: -1,
                msg: '请求超时.'
            });
        });

        req.on('error', function (err) {
            reject({
                code: -1,
                msg: '网络请求失败, 失败原因:\n' + err
            });
        });

        req.end();
    }).catch(function (e) {
        log(e.msg, 'error');
    });
};

module.exports = Request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxPQUFlLFFBQVMsTUFBVCxDQUFuQjtJQUNJLFFBQWUsUUFBUyxTQUFULENBRG5CO0lBRUksZUFBZSxJQUZuQjtJQUdJLE9BQWUsTUFBTSxVQUh6QjtJQUlJLE9BQWUsTUFBTSxRQUp6QjtJQUtJLGdCQUxKOztBQU9BLFVBQVUsdUJBQVE7QUFDZCxXQUFPLEtBQUssSUFBTCxFQUFQOztBQUVBLFdBQU8sSUFBSSxPQUFKLENBQWEsVUFBRSxPQUFGLEVBQVcsTUFBWCxFQUF1QjtBQUN2QyxZQUFJLFNBQVMsRUFBYjtZQUNJLFNBQVM7QUFDTCxzQkFESyxFQUNDLFVBREQsRUFDTztBQURQLFNBRGI7WUFJSSxrQkFKSjtZQUllLFlBSmY7O0FBTUEsY0FBTSxLQUFLLE9BQUwsQ0FBYyxNQUFkLEVBQXNCLGVBQU87QUFDL0IseUJBQWMsU0FBZDtBQUNBLGdCQUFJLFdBQUosQ0FBaUIsTUFBakI7O0FBRUEsZ0JBQUksRUFBSixDQUFRLE1BQVIsRUFBZ0IsZ0JBQVE7QUFDcEIsMEJBQVUsSUFBVjtBQUNILGFBRkQ7O0FBSUEsZ0JBQUksRUFBSixDQUFRLEtBQVIsRUFBZSxZQUFNO0FBQ2pCLG9CQUFJO0FBQ0EsNkJBQVMsS0FBSyxLQUFMLENBQVksTUFBWixDQUFUO0FBQ0gsaUJBRkQsQ0FFRSxPQUFRLENBQVIsRUFBWTtBQUNWLDZCQUFTO0FBQ0wsOEJBQU8sQ0FBQyxDQURIO0FBRUwscUZBQ007QUFIRCxxQkFBVDtBQUtILGlCQVJELFNBU1E7QUFDSiw0QkFBUyxNQUFUO0FBQ0g7QUFDSixhQWJEO0FBY0gsU0F0QkssQ0FBTjs7QUF3QkEsd0JBQWUsSUFBZixTQUF1QixJQUF2QixHQUE4QixJQUE5QixFQUFzQyxPQUF0Qzs7QUFFQSxZQUFJLFVBQUosQ0FBZ0IsWUFBaEIsRUFBOEIsWUFBTTtBQUNoQyxtQkFBUTtBQUNKLHNCQUFPLENBQUMsQ0FESjtBQUVKLHFCQUFPO0FBRkgsYUFBUjtBQUlILFNBTEQ7O0FBT0EsWUFBSSxFQUFKLENBQVEsT0FBUixFQUFpQixlQUFPO0FBQ3BCLG1CQUFRO0FBQ0osc0JBQU8sQ0FBQyxDQURKO0FBRUoseUNBQXlCO0FBRnJCLGFBQVI7QUFJSCxTQUxEOztBQU9BLFlBQUksR0FBSjtBQUNILEtBaERNLEVBZ0RILEtBaERHLENBZ0RJLGFBQUs7QUFDWixZQUFLLEVBQUUsR0FBUCxFQUFZLE9BQVo7QUFDSCxLQWxETSxDQUFQO0FBbURILENBdEREOztBQXdEQSxPQUFPLE9BQVAsR0FBaUIsT0FBakIiLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBIVFRQICAgICAgICAgPSByZXF1aXJlKCAnaHR0cCcgKSxcbiAgICBDb25zdCAgICAgICAgPSByZXF1aXJlKCAnLi9jb25zdCcgKSxcbiAgICB0aW1lb3V0TGltaXQgPSA1MDAwLFxuICAgIGhvc3QgICAgICAgICA9IENvbnN0LlVSTF9TRVJWRVIsXG4gICAgcG9ydCAgICAgICAgID0gQ29uc3QuVVJMX1BPUlQsXG4gICAgUmVxdWVzdFxuXG5SZXF1ZXN0ID0gcGF0aCA9PiB7XG4gICAgcGF0aCA9IHBhdGgudHJpbSgpXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJycsXG4gICAgICAgICAgICBvcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgaG9zdCwgcG9ydCwgcGF0aFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbWVvdXRJRCwgcmVxXG5cbiAgICAgICAgcmVxID0gSFRUUC5yZXF1ZXN0KCBvcHRpb24sIHJlcyA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXRJRCApXG4gICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoICd1dGY4JyApXG5cbiAgICAgICAgICAgIHJlcy5vbiggJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gZGF0YVxuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHJlcy5vbiggJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKCByZXN1bHQgKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlIDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgIDogYOacjeWKoeWZqOerr+i/lOWbnueahOS4jeaYr+acieaViOeahCBKU09OIOagvOW8jzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3Jlc3VsdH1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoIHJlc3VsdCApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0gKVxuXG4gICAgICAgIGxvZyggYGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH0ke3BhdGh9YCwgJ2RlYnVnJyApXG5cbiAgICAgICAgcmVxLnNldFRpbWVvdXQoIHRpbWVvdXRMaW1pdCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KCB7XG4gICAgICAgICAgICAgICAgY29kZSA6IC0xLFxuICAgICAgICAgICAgICAgIG1zZyAgOiAn6K+35rGC6LaF5pe2LidcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IClcblxuICAgICAgICByZXEub24oICdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICByZWplY3QoIHtcbiAgICAgICAgICAgICAgICBjb2RlIDogLTEsXG4gICAgICAgICAgICAgICAgbXNnICA6IGDnvZHnu5zor7fmsYLlpLHotKUsIOWksei0peWOn+WboDpcXG4ke2Vycn1gXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG5cbiAgICAgICAgcmVxLmVuZCgpXG4gICAgfSApLmNhdGNoKCBlID0+IHtcbiAgICAgICAgbG9nKCBlLm1zZywgJ2Vycm9yJyApXG4gICAgfSApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdFxuIl19